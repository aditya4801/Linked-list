class Solution {
public:
    ListNode* getMiddle(ListNode* head){
        ListNode* slow= head;
        ListNode* fast= head->next;
        
        while(fast!=NULL && fast->next!=NULL){
            slow= slow->next;
            fast= fast->next->next;
        }
        return slow;
    }
    
    ListNode* getReverse(ListNode* head){
        ListNode* prev= NULL;
        ListNode* curr= head;
        ListNode* next= NULL;
        
        while(curr!=NULL){
            next= curr->next;
            curr->next= prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }
    
    bool isPalindrome(ListNode* head) {
       if(head->next==NULL)
           return true; 
        
        ListNode* mid= getMiddle(head);
        
        ListNode* temp= mid->next;
        
        mid->next= getReverse(temp);
        
        ListNode* head1= head;
        ListNode* head2= mid->next;
        
        while(head2!=NULL){
            if(head1->val!=head2->val){
                return false;
            }
            head1= head1->next;
            head2= head2->next;
        }
        return true;
    }
};
